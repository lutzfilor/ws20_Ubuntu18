#!/tools/sw/perl/bin/perl -w
####!/usr/bin/perl -w
# Author    Lutz Filor
# Phone     408 807 6915
#
# Purpose   Creating multiple Register READ, WRITE transaction from pseudo transaction code
#
# Revision  VERSION     DATE            Description
# ================================================================================================
# History   1.01.01     11/15/2018      Create project TSG - Test Sequence Generator
#                       11/16/2018      Implement debugging feature on sub level
#           1.01.02     11/19/2018      Debugging user interface, debug feature
#           1.01.03     11/20/2018      Debugging REGEX expressions lowercase k vs Uppercase K !!
#                                       Processing initialization <keyword> <value> <metric>
#                                       Unit is not process correctly
#           1.01.04     11/22/2018      Regular expression specification debug
# ================================================================================================

my $VERSION = "1.01.04";

use strict;
use warnings;
use Term::ANSIColor;
#use Log::Log4perl   qw  (:easy);                                                   # Not avaiable
#no warnings 'experimental::smartmatch';                                            # Turning of smartmatch

use Carp            qw / croak
                         carp
                         cluck
                         confess    /;

use feature 'state';                                                                # Static local variables

use Readonly;
use Getopt::Long;
use File::Path      qw /make_path/;                                                 # Create directories
use File::Basename;                                                                 # Handle absolute file names
use Cwd             qw /abs_path
                        getcwd
                        cwd     /;                                                  # Current working directory

#use Padwalker;                                                                     # Not available/installed
#use Package::Stash;                                                                # available
#use Pod::Usage;                                                                    # available
#use DateTime;                                                                      # Not used

sub report;
sub parse_header;
sub calculate_payload;
sub elaborate_tracefile;
sub CreateLoggingPath;

Readonly my $BOUNDARY_1K    =>  1024;           # 1K byte boundary
Readonly my $BOUNDARY_4K    =>  4096;           # 4K byte boundary
Readonly my $KBYTE          =>  1024;           # 1k byte
Readonly my $MBYTE          =>  1024 * $KBYTE;  # 1M byte
Readonly my $GBYTE          =>  1024 * $MBYTE;  # 1G byte
Readonly my $LARBOUNDARY    =>     0 * $GBYTE;  #    0x0000_0000
Readonly my $UARBOUNDARY    =>     4 * $GBYTE;  # 4G byte physical address boundary
Readonly my $WORDSIZE       =>     4;           #  4 byte   or 32 bit
Readonly my $CACHELINE      =>    64;           # 64 byte cacheline size

Readonly my $DIGITS         => qr { \d+ (?: [.] \d*)? | [.] \d+ }xms;
Readonly my $SIGN           => qr { [+-] }xms;
Readonly my $EXPO           => qr { [eE] $SIGN? \d+ }xms;
Readonly my $FLOAT          => qr { ($SIGN?) ($DIGITS) ($EXPO?) }xms;
#Readonly my $PREAMBLE   => qr { [0x] }xms;                                         # Hexpreamble
#Readonly my $PREAMBLE   => qr { ^0x\B }xmsi;                                       # Hexpreamble
#Readonly my $PREAMBLE   => qr { (^0x\B) }xmsi;                                     # Hexpreamble
Readonly my $PREAMBLE       => qr { 0?x? }xi;                                       # Hexpreamble
Readonly my $NIBBLE         => qr { [0-9A-F_] }xmsi;
#Readonly my $DATAWORD   => qr { ($PREAMBLE?$NIBBLE+) }xms;
Readonly my $DATAWORD       => qr { $PREAMBLE?$NIBBLE+ }xms;
#Readonly my $NIBBLE     => qr { [x0-9A-F] }xmsi;
#Readonly my $DATAWORD   => qr { ($NIBBLE+) }xms;                                   # Hexdata & Numbers
#Readonly my $UNITS      => qr { (bit|byte|s|Hz|m) }xms;                            # SI base units
Readonly my $UNITS          => qr { bit|byte|s|Hz|m|g }xms;                         # SI base units
Readonly my $PREFIX         => qr { Y|Z|E|P|T|G|M|k|K|m|u|n|p|f|a|y|z }xms;         # SI prefix 10^18 to 10^-18 range NOTE :: micro is substitute w/ [u] for muy
#Readonly my $PREFIX     => qr { (E|P|T|G|M|k|K|m|u|n|p|f|a) }xms;                  # SI prefix 10^18 to 10^-18 range NOTE :: micro is substitute w/ [u] for muy
#Readonly my $PREFIX     => qr { (^E|P|T|G|M|k|m|u|n|p|f|a) }xms;                   # SI prefix 10^18 to 10^-18 range NOTE :: micro is substitute w/ [u] for muy
#Readonly my $PREFIX     => qr { [YZEPTGMkKmunpfayz] }xms;                          # SI prefix 10^18 to 10^-18 range NOTE :: micro is substitute w/ [u] for muy
                                                                                    # Because I looked a day for an error of k vs K, uppercase K is included for robustness
#Readonly my $MEASURE    => qr { ($PREFIX?)($UNITS) }xms;
#Readonly my $MEASURE    => qr { ($PREFIX?$UNITS) }xms;
Readonly my $MEASURE        => qr { $PREFIX?$UNITS }xms;

my %defines;                                                                        # Command line defines
my %opts    =   (   dir_pattern         =>  'ahbfab',                               # Default name pattern for AHB trace points            <== !! Depending on Environment
                    file_pattern        =>  'ahb_beat.log',                         # Default name pattern for AHB traces                  <== !! Depending on Environment
                    progress_log        =>  'progress.log',                         # log     progress phases of program                    !! Can't be turned off, aka run.log
                    error_log           =>  'error.log',                            # log     dedicated parsing errors,                     !! Can't be turned off
                    trace_default       =>  'trace.log',                            # Default logname for logging input trace files
                    parse_default       =>  'parser.log',                           # Default logname for parsing input trace file
                    build_default       =>  'build.log',                            # Default logname for building trace transaction/transfer list
                    transfer_default    =>  'transfer.log',                         # Default logname for transfers, type (IDLE,ADDR,DATA,BUSY) and duration
                    transferlist_default=>  'pointer.log',                          # Default logname for transfer list
                    payload_default     =>  'payload.log',                          # Default logname for payload analysis initialize_payload_analysis()
                    transaction_default =>  'transaction.log',                      # Default logname for transaction analysis, by direction, type and size
                    transaction2_default=>  'transaction2.log',                     # Default logname for transactio2 analysis, by direction, type and size via pointer
                    latency_default     =>  'latency.log',                          # Default logname for latency     analysis, ( from, to ) window
                    bandwidth_default   =>  'bandwidth.log',                        # Default logname for bandwidth   analysis, ( from, to ) window
                    window_default      =>  'window.log',                           # Default logname for determine the trace window within the trace file
                    address_default     =>  'address.log',                          # Default logname for address coverage analysis, accumulative
                    report_default      =>  'analysis.rpt',                         # Default logname for analysis report
                    coverage_default    =>  'coverage.rpt',                         # Default logname for coverage report
                    errlog_default      =>  'error.log',                            # Default logname for reporting on input trace file errors
                    report_path_default =>  'ahb_tracker_analysis',                 # Default report path root
                    owner               =>  'Lutz Filor',                           # Maintainer
                    call                =>  join (' ', @ARGV),                      # Capture command line
                    program             =>  $0,                                     # Script    Name
                    version             =>  $VERSION,                               # Script    Version
                    log_path_default    =>  'logs',                                 # Default logging path appendix for each trace
                    subs                =>  [   qw  (   debug
                                                        DebugControl
                                                        check_command_line
                                                        flush_test_sequence
                                                        init_parser
                                                        init_sequence
                                                        compile_sequence
                                                        writing_sequence
                                                    )                               # List of Subroutines
                                            ],
                    keywords            =>  [   qw  (   addressspace
                                                        addresssize
                                                        baseaddress
                                                        block_range
                                                        databussize
                                                        wordaligned
                                                        blk_boundry
                                                        reserved
                                                        mask
                                                    )
                                            ],                                      # List of implemented keywords
                    indent              =>  5,                                      # Default indentation
                    preamble            =>  ' ... ',                                # Default preamble
                    indent_pattern      =>  '',                                     # Default indent pattern Whitespace
                );

my @keyword = qw(   addresssize baseaddress block_range databussize
                );                                                                  # Recognized keywords
my %testsequence;
                                                                                    # access AHB command transfers via time stamp

my $error_log       = 'error.log';                                                  # log    trace file reporting errors
#################################################################################################################################
#   addresssize     <num>       <unit>      32, 36,40,44 .. bit
#   addresspace     <num>       <unit>      4 Gbyte
#   baseaddress <address>                   0x000000000 0x0000_0000
#   block_range     <num>       <unit>      4,8,16 .. kbyte/Mbyte
#   databussize     <num>       <unit>      32,64 .. bit    4,8,16  byte
#   wordaligned     <num>       <unit>      4,8,16 byte
#   addrboundry     <num>       <unit>
#   mask        <address>       <mask>
#   reserved    <address>
#   data        <address>       <data>
#   randomdata  <address>       random
#   scan        <address>    <address>
#   init
#   poll        <address>       <data>
#################################################################################################################################

#
# main entry
#
#=================================================================================================================================
my   ($s,$m,$h,$cday,$mon,$year,$wday,$yday,$isdst) = localtime;
open (my $proh, ">$opts{progress_log}")  ||  die " Cannot create log $opts{progress_log}";   # Open Progress log file

GetOptions  (   'input|in=s'            =>  \$opts{pseudo_seq},                     # Source    w/ read,write transaction definition
                'debug|dbg=s@'          =>  \$opts{dbg},                            # Debug     Turning on debug feature on sub by sub
                'dbg0'                  =>  \$opts{dbg0},                           #           Observe prior to debug feature
                'dbg1'                  =>  \$opts{dbg1},                           #           Reveal unpacking and assignment, ll

                'list|l=s@'             =>  \$opts{lst},                            # List      Subroutines
                'flush'                 =>  \$opts{flush},                          # Flush     Test Sequence
                'scan'                  =>  \$opts{scan},                           #           Scan sweep full address range
                'specification'         =>  \$opts{spec},

                'defines=s'             =>  \%defines,
                'help|h|?'              =>  \$opts{help},                           # Usage     Information
                'man|m'                 =>  \&help2,                                # Manual    Information
            );                                                                      # Command Line Processor


printf "\n";                                                                        # Spacer
DebugFeatures       (   \%opts      );
DebugControl        (   \%opts      );                                              # Tuning debuggi
debug               (   '','debug'  ) if debug('debug');                            # debug(subr=name,phase=set/debug/probe
check_command_line  (   \%opts      ) if debug('check_command_line');               # Break the chicken and egg problem
if  (   defined $opts{flush}    ) {                                                 # coverage is a seperate analysis
    flush_test_sequence (   \%opts
                        ,   \%defines
                        ,   \%testsequence  );

    exit 0; # Main Exit
} elsif (   defined $opts{help}     )  {                                            # Online    help
    help    (   \%opts  );
} else {
    printf "\n";
    printf " ... USAGE    :: %s %s\n",$opts{program}
                                     ,$opts{version};
    printf "     Type     :: %s --help for more information\n",$opts{program};
    printf "\n";
    exit 0;
}

#=================================================================================================================================
# End of main()

#
# Subroutine implementation
#
#=================================================================================================================================


sub   flush_test_sequence   {
      my    (   $opts_ref                                                                                   # Input     Reference to %opts w/ commandline input
            ,   $defs_ref
            ,   $tseq_ref   )   = @_;

      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}
      ${$opts_ref}{specification} //= 'testsequence.ini';
      ${$opts_ref}{test_sequence} //= 'basic_sequence.seq';
      my $n = subroutine('name');
      my $file_name = ${$opts_ref}{specification};
      my %spec;
      my $lnr;

      printf "%*s%s()++\n",$i,$p,$n if( debug($n));
      if ( defined ${$opts_ref}{specification}  ){
          if (-e $file_name) {
            open ( my $spec,"<",$file_name) || die "Can't open $file_name : $!";
            my @lines = <$spec>;
            foreach my $line (@lines){
                chomp $line; $lnr++;
                #printf "%s\n", $line;
                init_parser     ( $opts_ref, $line      , $lnr      );
                init_sequence   ( $opts_ref, $tseq_ref  , $lnr      );
            }#all lines
            close( $spec );
            compile_sequence( $opts_ref, $defs_ref  , $tseq_ref );
            writing_sequence( $opts_ref, $defs_ref );
          } else {
             warn "     Can't find Specification input file $file_name\n";
          }#
      }#if specification
}#sub flush_test_sequence

sub   init_parser {
      my    (   $opts_ref                                               # command line reference
            ,   $line                                                   # line
            ,   $lnr        )   = @_;                                   # line-number
      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}
      my $n = subroutine('name');
      printf "%*s%s()\n",$i,$p,$n   if( debug($n));
      printf "%4s %s\n",$lnr,$line  if( debug($n));
      if ( $line =~  m{^  (\b\w+\b)                                     # <== Keyword
                     #\s+ (0x)?($NIBBLE+)                               # <== DATA and or ADDR
                     #\s+ ($DATAWORD)                                   # <== DATA and or ADDR
                     #\s+ (0?x?[0-9a-fA-F]+)                            #                       <= works
                     #\s+ ($PREAMBLE?$NIBBLE+)                          # <== DATA and or ADDR
                      \s+ ($DATAWORD)                                   # <== DATA and or ADDR
                      \s? ($MEASURE)?                                   # increase readability w/ x-modifier
                      }x                      )                         # regex
      {
          ${$opts_ref}{keyword}   =   $1;
          ${$opts_ref}{keyword}   =~  s/[ ]//;
          ${$opts_ref}{dataword}  =   $2;
          ${$opts_ref}{metric}    =   $3;

          if ( defined ${$opts_ref}{dataword}  ) {
                printf "%*s%s"  , $i,$p
                                , ${$opts_ref}{dataword};
                if (${$opts_ref}{dataword}  =~ m{    ($PREAMBLE)?        # optional  preamble <0x>
                                                    ($NIBBLE+)          # mandatory unit
                                                }x ) 
                {
                    ${$opts_ref}{value}     =   $2;
                    ${$opts_ref}{value}     =~  s/_//;                  # Remove group separator
                    ${$opts_ref}{value}     = hex ${$opts_ref}{value};  # < 0xFFFF_FFFF
                    printf " = %s Success\n"  ,${$opts_ref}{value} if( debug($n));
                }#extract value form string
                else {
                }# Fail extraction
          } else {
                # WARNING
          }

          if ( defined ${$opts_ref}{metric} ) {
              ${$opts_ref}{metric}            =~  s/K/k/;               # allow user error for robustness
              printf "%*s%s"  ,$i,$p
                              ,${$opts_ref}{metric}   if( debug($n) );  
              if (${$opts_ref}{metric} =~ m{  ($PREFIX)?                # optional  prefix
                                              ($UNITS)                  # mandatory unit
                                            }x ) 
              {
                  ${$opts_ref}{unit}            =   $2;                 # it beats me that this is $3 vs $2
                  ${$opts_ref}{prefix}          =   $1;
                  ${$opts_ref}{magnitude}       =   (! defined ${$opts_ref}{prefix} ) ?  1
                                                :   (${$opts_ref}{prefix} =~ m/Y/   ) ? 24  # Yotta is the largest supported prefix
                                                :   (${$opts_ref}{prefix} =~ m/Z/   ) ? 21  # Zetta is supported prefix
                                                :   (${$opts_ref}{prefix} =~ m/E/   ) ? 18  # Eta   is supported prefix
                                                :   (${$opts_ref}{prefix} =~ m/P/   ) ? 15
                                                :   (${$opts_ref}{prefix} =~ m/T/   ) ? 12
                                                :   (${$opts_ref}{prefix} =~ m/G/   ) ?  9
                                                :   (${$opts_ref}{prefix} =~ m/M/   ) ?  6
                                                :   (${$opts_ref}{prefix} =~ m/k/   ) ?  3  
                                                :   (${$opts_ref}{prefix} =~ m/m/   ) ? -3
                                                :   (${$opts_ref}{prefix} =~ m/u/   ) ? -6
                                                :   (${$opts_ref}{prefix} =~ m/n/   ) ? -9
                                                :   (${$opts_ref}{prefix} =~ m/p/   ) ?-12
                                                :   (${$opts_ref}{prefix} =~ m/f/   ) ?-15
                                                :   (${$opts_ref}{prefix} =~ m/a/   ) ?-18  # atto  is supported prefix
                                                :   (${$opts_ref}{prefix} =~ m/z/   ) ?-21  # zetto is supported prefix
                                                :                                      -24; # yotto is the smalles supported prefix
                  ${$opts_ref}{prefix}        //=   '';
                  printf      " : %s %s =  %s\n"  ,${$opts_ref}{prefix}
                                                  ,${$opts_ref}{unit}
                                                  ,${$opts_ref}{magnitude}    if( debug($n));
              } else {
                   #WARNING SI unit not recognized
              }
          } else {
             ${$opts_ref}{metric}            //=   '';
             ${$opts_ref}{prefix}            //=   '';
             ${$opts_ref}{unit}              //=   '';
             ${$opts_ref}{magnitude}         //=   '';
          }
          printf "%*s%s %s %s+++++++\n" ,$i,$p
                                        ,${$opts_ref}{keyword}
                                        ,${$opts_ref}{dataword}
                                        ,${$opts_ref}{metric}       if( debug($n));
      }#value assignment
      else {
          printf "--\n" if( debug($n));
          ${$opts_ref}{keyword}     =   $1;
          ${$opts_ref}{value}       =   $2;
          ${$opts_ref}{metric}      =   $3;
          if ( $line =~  m{   ^(\w+)          # <== Keyword
                          \s+ ($DATAWORD)     # <== ADDR or DATA
                          \s+ ($MEASURE)?     # increase readability w/ x-modifier
                          }x ) {
                ${$opts_ref}{keyword}   =   $1;
                ${$opts_ref}{value}     =   $3;
                ${$opts_ref}{metric}    =   $4;
          }#parse a second time
      }# parse again
}#sub init_parser


sub   init_sequence {
      my    (   $opts_ref
            ,   $tseq_ref
            ,   $lnr        )   = @_;
      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}
      my $n = subroutine('name');
      printf "%*s%s()\n",$i,$p,$n   if( debug($n));
      #printf "%*s%-*s%*s %*s :: %s = %s\n", 5,''
      printf "%*s<%-*s>%*s %*s\n", 5,''
      #printf "%*s<%s>%*s %*s\n", 4,''
                            ,12,${$opts_ref}{keyword}
                            #,   ${$opts_ref}{keyword}
                            ,14,${$opts_ref}{dataword}
                            , 5,${$opts_ref}{metric};
                           # ,   ${$opts_ref}{prefix}
                           # ,   ${$opts_ref}{magnitude};
      if ( ${$opts_ref}{keyword} ~~ @{${$opts_ref}{keywords}} ) {
          if        (${$opts_ref}{keyword} =~ m/addresssize/ ){
                if  (${$opts_ref}{metric}  ~~ [ qw (bit byte) ]) {
                } else {
                    printf "%*s%-*s illegal metric\n", 5,'',17,${$opts_ref}{metric};
                }# right metric
          } elsif   (${$opts_ref}{keyword} =~ m/addressspace/ ){
                if  (${$opts_ref}{unit}  ~~ [ qw (bit byte) ]) {
                    if  (${$opts_ref}{prefix} ~~ [qw ( E P T G M k ) ] ) {
                        printf  "%*s%*s prefix\n",5,'',17,${$opts_ref}{prefix};
                    } else {
                        printf  "%*s%*s illegal prefix\n",5,'',17,${$opts_ref}{prefix};
                    }
                    # prefered byte
                    ${$opts_ref}{value}  >>=  3 if  (${$opts_ref}{metric} =~ m/bit/);

                    if ( ${$opts_ref}{value} == 0) {
                    } else {
                    }#
                } else {
                    printf "%*s%-*s illegal metric <%s><%s>\n", 5,'',17 ,${$opts_ref}{metric}
                                                                    ,${$opts_ref}{unit}
                                                                    ,${$opts_ref}{prefix};
                }# right metric
          } elsif   (${$opts_ref}{keyword} =~ m/baseaddress/ ){
                if  (${$opts_ref}{metric}  !~ m// ) {               # Addresses have no metric
                    if  (${$opts_ref}{prefix} !~ m// ) {
                        if (    ${$opts_ref}{value} >= $LARBOUNDARY 
                           &&   ${$opts_ref}{value} <= $UARBOUNDARY ) {
                            printf "%*s%*s :: %s =" , $i,$p
                                                    , -13, ${$opts_ref}{keyword}
                                                    , ${$opts_ref}{dataword};
                            printf " %s\n",           ${$opts_ref}{value};

                        } else {
                            printf "%*s%*s %s\n", $i,$p, ${$opts_ref}{keyword}, 'out of range';
                        }
                        if (    ${$opts_ref}{value}  % $WORDSIZE )   {
                            printf "%*s%*s %s :: %s\n", $i,$p, 
                                                , -13, ${$opts_ref}{keyword}
                                                , 'not WORD aligned'
                                                , ${$opts_ref}{value} % $WORDSIZE;
                        }
                        if (    ${$opts_ref}{value}  % $BOUNDARY_1K )   {
                            printf "%*s%*s %s :: %s\n", $i,$p, 
                                                , -13, ${$opts_ref}{keyword}
                                                , 'not 1K boundary aligned'
                                                , ${$opts_ref}{value} % $BOUNDARY_1K;
                        }
                        
                        if (    ${$opts_ref}{value}  % $BOUNDARY_4K )   {
                            printf "%*s%*s %s :: %s\n", $i,$p, 
                                                , -13, ${$opts_ref}{keyword}
                                                , 'not 4K boundary aligned'
                                                , ${$opts_ref}{value} % $BOUNDARY_4K;
                        }
                    } else {
                        printf  "%*s<%*s> illegal prefix\n",5,'',17,${$opts_ref}{prefix};
                    }
                } else {
                    printf "%*s<%-*s> illegal metric\n", 5,'',17,${$opts_ref}{metric};
                }# right metric, prefered byt
          } elsif   (${$opts_ref}{keyword} =~ m/block_range/ ){
                if  (${$opts_ref}{metric}  ~~ [ qw (bit byte) ]) {
                } else {
                    printf "%*s%-*s illegal metric\n", 5,'',17,${$opts_ref}{metric};
                }# right metric
          } elsif   (${$opts_ref}{keyword} =~ m/databussize/ ){
                if  (${$opts_ref}{metric}  ~~ [ qw (bit byte) ]) {
                } else {
                    printf "%*s%-*s illegal metric\n", 5,'',17,${$opts_ref}{metric};
                }# right metric
          } elsif   (${$opts_ref}{keyword} =~ m/wordaligned/ ){
                if  (${$opts_ref}{metric}  ~~ [ qw (bit byte) ]) {
                    # preferable byte
                } else {
                    printf "%*s%-*s illegal metric\n", 5,'',17,${$opts_ref}{metric};
                }# right metric
          } elsif   (${$opts_ref}{keyword} =~ m/blk_boundry/ ){
                if  (${$opts_ref}{metric}  ~~ [ qw (bit byte) ]) {
                    #preferable byte

                } else {
                    printf "%*s%-*s illegal metric\n", 5,'',17,${$opts_ref}{metric};
                }# right metric
          } elsif   (${$opts_ref}{keyword} =~ m/reserved/ ){
                #wordaligned byte aligned 2,4 bytes
          } elsif   (${$opts_ref}{keyword} =~ m/mask/ ){
          }# check keyword
      } else {
          printf "%*s%-*s unknown keyword\n", 5,'',17,${$opts_ref}{keyword};
      }# unknown keyword
}#sub init_sequence


    # Parsing   AHB trace file
    # Building   2D directed graph/list of AHB (ADDR, DATA) transfers
    #

    #   open specification file
    #   BASEADDRESS     32 bit  0xFFFF0000
    #   DATAWIDTH       32 bit
    #                   4KB     alignment
    #                   4Byte   alignment
    #   Reserved address
    #   Bitmask  address        FFFF_FFFF   default
    #   Pattern  address        random      default
    #   WRITE    address data
    #   READ     address data
    #   COMPARE  expect  data
    

sub   compile_sequence{
      my    (   $opts_ref
            ,   $defs_ref       )   = @_;
      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}
      my $n = subroutine('name');
      printf "%*s%s()\n",$i,$p,$n if( debug($n));
      if  (   defined $opts{scan}    ) {                                                                    # coverage is a seperate analysis
          scan_sequence (   $opts_ref, $defs_ref    );
      }
}#sub compile_sequence


sub   scan_sequence{
      my    (   $opts_ref
            ,   $defs_ref       )   = @_;
      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}
      my $n = subroutine('name');
      printf "%*s%s()\n",$i,$p,$n if( debug($n));
      #for () {
      #}#for
}#sub


sub   writing_sequence{
      my    (   $opts_ref
            ,   $defs_ref       )   = @_;
      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}
      my $n = subroutine('name');
      printf "%*s%s()\n",$i,$p,$n if( debug($n));

}#sub writing_sequence

sub   check_command_line{
      my    (   $opts_ref                                                                                   # Input     Reference to %opts w/ commandline input
            ,   $defs_ref       )   = @_;

      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}

      printf "%*s%s()\n",$i,$p,subroutine('name') if( defined ${$opts_ref}{dbg} );

      if ( defined ${$opts_ref}{subs}    ) {
          printf "%*s%s :: %s\n",$i,$p,'Subroutines','list';
          foreach my $entry (@{${$opts_ref}{subs}}   ){
              printf "%*s%s\n",$i+4,$p,$entry;
          }#foreach
      }#if

      if ( defined ${$opts_ref}{keywords}    ) {
          printf "%*s%s :: %s\n",$i,$p,'Keywords','list';
          foreach my $entry (@{${$opts_ref}{keywords}}   ){
              printf "%*s%s\n",$i+4,$p,$entry;
          }#foreach
      }#if
}#sub check_command_line


sub   help{
      my    (   $opts_ref       )   = @_;                                                                   # Input     Reference to %opts

      printf "\n";
      printf "     SYNOPSYS :: Test Sequence Generator %s\n",${$opts_ref}{program};
      printf "\n";
      printf " ... USAGE    :: %s %s\n",${$opts_ref}{program}
                                       ,${$opts_ref}{version};
      printf "\n";
      printf "     %s     --input=<FILE>\n", ${$opts_ref}{program};
      printf "                  --input=<FILE> --output=<FILE>\n";
      printf "\n";
      printf "\n";
      printf "     Debugging\n";
      printf "     <%s>     --input=<FILE> --output=<FILE> | & tee ./log.out\n",${$opts_ref}{program};
      printf "                  --debug=<SUB>   make any subroutine observable\n";
      printf "\n";
      printf "\n";
      printf "     Author    %s\n",${$opts_ref}{owner};
      printf "     Synpatics Confidential Tool               Copyright, San Jose 2018\n";
      exit(0);
}#sub help


sub   subroutine {
      my ($r)    = ( @_, 'name');                                                   # full, namespace, name
      my ($space,$name) = split(/::/, (caller(1))[3]);
      return    ( $r =~ m/full/ ) ?  (caller(1))[3]                                 #           return package::subname
              : ( $r =~ m/space/) ?  $space                                         #           return subroutin name
              : ( $r =~ m/name/ ) ?  $name                                          #           return namespace/package
              : $name;                                                              # default   return subroutin name
}#sub subroutine

sub   DebugFeatures{
      my    (   $opts_ref   )   = @_;
      my $msg = 'Debug feature dgb0 ';
      printf "%*s%s%s%s\n",5,'',$msg,(defined $opts{dbg0})?' ':'un','defined';
}#sub DebugFeatures

sub   DebugControl {
      my    (   $opts_ref   )   =   @_;                                             # Input     Command Line Options
                                                                                    # Output    Logging Control of all log files
      my $i = ${$opts_ref}{indent};
      my $p = '';                                                                   # ${$opts_ref}{padding_pattern}
      my @ulist;                                                                    # unpacked list

      printf "%*s%s()\n",$i,$p,subroutine('name')   if( defined ${$opts_ref}{dbg0} );

      if ( defined ${$opts_ref}{dbg}    ) {
          printf "%*s%s :: %s\n",$i,$p
                                ,'DebugOptions'
                                ,'unpacking'        if( defined ${$opts_ref}{dbg0} );
          foreach my $entry (@{${$opts_ref}{dbg}}   ){
              printf "%*s%s\n",$i+4,$p,$entry       if( defined ${$opts_ref}{dbg1} );
              my @unpacked = split /,/ ,$entry;
              foreach my $e (@unpacked) {
                  printf "%*s%s +\n",$i+4,$p,$e     if( defined ${$opts_ref}{dbg1} );
                  push (@ulist, $e);
              }#unpack
          }#each entry
          ${$opts_ref}{dbg} = \@ulist;
          printf "%*s%s :: %s :: %s\n"  ,$i,$p
                                        ,'DebugOptions'
                                        ,'self check'
                                        , $#ulist+1 if( defined ${$opts_ref}{dbg1} );
          foreach my $entry ( @ulist ){
              #printf "%*s%s\n",$i+4,$p,$entry;
              if ($entry =~ m/all/ ) {
                foreach my $e ( @{${$opts_ref}{subs}} ){
                    printf "%*s%s::%s\n",5,''
                                        ,'set',$e   if( defined ${$opts_ref}{dbg1} );;
                    debug($e,'set',${$opts_ref}{dbg1});
                }#foreach
              }#
              if ( $entry ~~ @{${$opts_ref}{subs}} ) {
                    printf "%*s%s::%s\n",5,''
                                        ,'set'
                                        ,$entry     if( defined ${$opts_ref}{dbg1} );
                    debug($entry,'set',${$opts_ref}{dbg1});
              }
          }#foreach
      }#if
}#sub DebugControl


sub   debug {
      my    (   $name
            ,   $phase
            ,   $dbg    )   =   @_;

      $phase    //= 'probe';            # default setting !defined
      $dbg      //= 0;
      state %holding;                   # holding all debug setting
      my $size = keys %holding;

      printf "     debug(phase=%s, name=%s)\n",$phase, $name if $dbg;              # Need to think how to debug subroutine debug
      if      ( $phase =~ m/set/    ) { # setup debugging feature
         #printf "%*sholding hash has %s entries\n",5,'',$size;
         #printf "%*s%s setting\n",5+4,'',$name;
         $holding{$name} = 1; $size = keys %holding;
         #printf "%*sHolding hash is %s\n",5,'', $size;
      } elsif ( $phase =~ m/probe/  ) { # probe debugging feature
         if ( defined $holding{$name} ) {
             #printf "%*s%s::%s\n",5+4,'',$name,$holding{$name};
             return $holding{$name};
         } else {
             return 0;
         }
      } elsif ( $phase =~ m/debug/  ) {
         printf "%*s%s :: debugging\n",5,'',subroutine('name');
         foreach my $e ( keys %holding) {
             printf "%*s%s::%s\n",5+4,'', $holding{$e}, $e;
         }#foreach
      } else  {
      }#default

}#sub debug
