#!/tools/sw/perl/bin/perl -w

# Author    Lutz Filor
# Phone     408 807 6915
#
# Purpose   Creating multiple Register READ, WRITE transaction from pseudo transaction code
#
# Revision  VERSION     DATE            Description
# ================================================================================================
# History   1.01.01     11/15/2018      Create project TSG - Test Sequence Generator
#                       11/16/2018      Implement debugging feature on sub level
# ================================================================================================

my $VERSION = "1.01.01";

use strict;
use warnings;
use Carp            qw / croak  
                         carp
                         cluck
                         confess    /;

use feature 'state';                                                                # Static local variables

use Readonly;
use Getopt::Long;
use File::Path      qw /make_path/;                                                 # Create directories
use File::Basename;                                                                 # Handle absolute file names
use Cwd             qw /abs_path
                        getcwd
                        cwd     /;                                                  # Current working directory

#use Padwalker;                                                                     # Not available/installed
#use Package::Stash;                                                                # available
#use Pod::Usage;                                                                    # available
#use DateTime;                                                                      # Not used

sub report;
sub parse_header;
sub calculate_payload;
sub elaborate_tracefile;
sub CreateLoggingPath;

Readonly my $DIGITS => qr { \d+ (?: [.] \d*)? | [.] \d+ }xms;
Readonly my $SIGN   => qr { [+-] }xms;
Readonly my $EXPO   => qr { [eE] $SIGN? \d+ }xms;
Readonly my $FLOAT  => qr { ($SIGN?) ($DIGITS) ($EXPO?) }xms;

my %defines;                                                                        # Command line defines
my %opts    =   (   dir_pattern         =>  'ahbfab',                               # Default name pattern for AHB trace points            <== !! Depending on Environment
                    file_pattern        =>  'ahb_beat.log',                         # Default name pattern for AHB traces                  <== !! Depending on Environment
                    progress_log        =>  'progress.log',                         # log     progress phases of program                    !! Can't be turned off, aka run.log
                    error_log           =>  'error.log',                            # log     dedicated parsing errors,                     !! Can't be turned off
                    trace_default       =>  'trace.log',                            # Default logname for logging input trace files
                    parse_default       =>  'parser.log',                           # Default logname for parsing input trace file
                    build_default       =>  'build.log',                            # Default logname for building trace transaction/transfer list
                    transfer_default    =>  'transfer.log',                         # Default logname for transfers, type (IDLE,ADDR,DATA,BUSY) and duration
                    transferlist_default=>  'pointer.log',                          # Default logname for transfer list
                    payload_default     =>  'payload.log',                          # Default logname for payload analysis initialize_payload_analysis()
                    transaction_default =>  'transaction.log',                      # Default logname for transaction analysis, by direction, type and size
                    transaction2_default=>  'transaction2.log',                     # Default logname for transactio2 analysis, by direction, type and size via pointer
                    latency_default     =>  'latency.log',                          # Default logname for latency     analysis, ( from, to ) window
                    bandwidth_default   =>  'bandwidth.log',                        # Default logname for bandwidth   analysis, ( from, to ) window
                    window_default      =>  'window.log',                           # Default logname for determine the trace window within the trace file
                    address_default     =>  'address.log',                          # Default logname for address coverage analysis, accumulative
                    report_default      =>  'analysis.rpt',                         # Default logname for analysis report
                    coverage_default    =>  'coverage.rpt',                         # Default logname for coverage report
                    errlog_default      =>  'error.log',                            # Default logname for reporting on input trace file errors
                    report_path_default =>  'ahb_tracker_analysis',                 # Default report path root
                    owner               =>  'Lutz Filor',                           # Maintainer
                    call                =>  join (' ', @ARGV),                      # Capture command line
                    program             =>  $0,                                     # Script    Name
                    version             =>  $VERSION,                               # Script    Version
                    log_path_default    =>  'logs',                                 # Default logging path appendix for each trace
                    subs                =>  [   qw  (   DebugControl
                                                        check_command_line
                                                    )                               # List of Subroutines
                                            ],
                    indent              =>  5,                                      # Default indentation
                    preamble            =>  ' ... ',                                # Default preamble
                    indent_pattern      =>  '',                                     # Default indent pattern Whitespace
                );

my %transfer_pointer;                                                               # Unified pointer state of AHB transfer list                            
my @traces;                                                                         # Trace file list
my @trace_dir;                                                                      #
my @trace_dirs;                                                                     #                                                               to be deprecated
my %Trace;                                                                          # Trace  file header information
my %ahb_transfer_new;                                                               #        AHB transfer    analysis new
my %ahb_latency_new;                                                                #        AHB latency     analysis new/refactored
my %ahb_bandwidth_new;                                                              #        AHB bandwidth   analysis new/refactored
my %ahb_transaction_new;                                                            #        AHB transaction analysis new/refactored
my %ahb_transaction2_new;                                                           #        AHB transaction analysis new/refactored
my %ahb_address_new;                                                                #        AHB address     coverage   analysis
my %AHB_hash;                                                                       # LEGACY    Trace file transfer information                     to be deprecated
                                                                                    # access AHB command transfers via time stamp

my $error_log       = 'error.log';                                                  # log    trace file reporting errors
#################################################################################################################################
#################################################################################################################################

#
# main entry
#
#=================================================================================================================================
my   ($s,$m,$h,$cday,$mon,$year,$wday,$yday,$isdst) = localtime;
open (my $proh, ">$opts{progress_log}")  ||  die " Cannot create log $opts{progress_log}";   # Open Progress log file

GetOptions  (   'input|in=s'            =>  \$opts{pseudo_seq},                     # Source    w/ read,write transaction definition
                'debug|dbg:s@'          =>  \$opts{dbg},                            # Debug     Turning on debug feature on sub by sub
                'list|l=s@'             =>  \$opts{lst},                            # List      Subroutines

                #'address_coverage|ac'  =>  \&addr_cov,                             # --        testing address coverage
                'address_coverage|ac'   =>  \$opts{coverage},                       # --        testing address coverage
                #'debug'                 =>  \$opts{debug},                          # Turn      ON LOGGING
                'info'                  =>  \$opts{info},                           # Report    trace file information => window (Open, Close) 
                'from|s=i'              =>  \$opts{START},                          # Specify   Start time, overwrite default
                'until|e=i'             =>  \$opts{STOP},                           # Specify   End   time, overwrite default
                'report_dir|o=s'        =>  \$opts{report_dir},                     # Overwrite Output      default name of report directory
                'trace_dir|dir|d=s'     =>  \$opts{trace_dir},                      # Specify   directory w/ trace files
                'trace|t|f=s'           =>  \$opts{trace_file},                     # Specify   trace file
                'trace_dirs=s'          =>  \$opts{trace_dirs},                     # Specify   all project trace files
                'debug_trace|dbg1'      =>  \$opts{debug_trace},                    # Debug buffered STDERR file correlation, START here
                'debug_line|dbg2'       =>  \$opts{debug_line},                     # Debug buffered STDERR line correlation, Tbd not implemented
                'debug_logs|dbg3'       =>  \$opts{debug_logs},                     # Debug writeout logfiles for all steps, deep debug
                'logging|log=s@'        =>  \$opts{logs},                           # Turn      ON selective LOGGING
                'defines=s'             =>  \%defines,
                'help|h|?'              =>  \$opts{help},                           # Usage     Information
                'man|m'                 =>  \&help2,                                # Manual    Information
            );                                                                      # Command Line Processor


DebugControl        (   \%opts  );                                                  # Tuning debugging
check_command_line  (   \%opts  );

if ((   ( defined $opts{trace_file}                         )
   ||   ( defined $opts{trace_file} && defined $opts{info}  )
   ||   ( defined $opts{trace_dir}                          )
   ||   ( defined $opts{trace_dirs}                         ))   
   &&   (!defined $opts{coverage}                           )   )                   # coverage is a seperate analysis
{   # 
    # Parsing   AHB trace file
    # Building   2D directed graph/list of AHB (ADDR, DATA) transfers
    #
    if ( defined $opts{debug_trace} ) {
        printf "\n";
        printf " ... set up bandwidth analysis ...\n";
    }#debugging

    ### check_environment           (   \%opts                                          # Input     Command Line Options
    ###                             ,   \@traces                                        # Output    List of trace files w/ information
    ###                             ,   \@trace_dirs    );                              #           Deprecated aka not used

    ### analyze_tracefiles          (   \%opts                                          # Input     Command Line Options
    ###                             ,   \@traces                                        #           List of trace files w/ information
    ###                             ,   \%Trace                                         #           Hash of trace header information        from global to local
    ###                             ,   \%transfer_pointer  );                          #           Hash of pointer of AHB transfer list    from global to local
                               
    printf " ... bandwidth analysis ... done\n" if ( defined $opts{debug_trace} );
    printf "\n";                                                                    # None maskable spacer to the next command line

    exit 0; # Main Exit
} elsif (   defined $opts{coverage} )                                                   # Testing   address coverage
{
    printf "\n";
    printf " ... set up coverage analysis ...\n";
    ### addr_cov    (   \%opts                                                          # Input     Command Line Options
    ###             ,   \@traces                                                        #           List of trace files
    ###             ,   \@trace_dirs                                                    #           List of List w/ trace files
    ###             ,   \%Trace                                                         #           Trace header information
    ###             ,   \%transfer_pointer                                              #           Hash of pointer into AHB transfer list 
    ###             ,   \%ahb_address_new       );                                      #           Hash of address coverage analysis
    printf " ... set up coverage analysis ... done\n";
    exit 0;
} elsif (   defined $opts{help}     )  {                                                # Online    help
    printf  "Why is this option not define\n";
    help    (   \%opts  );
} else {
    printf "\n";
    printf "%s Version %s\n", $0, $VERSION;
    printf "    Type <--help> for more information\n", $0;
    printf "\n";

   # 
   # Debugging negative command line condition
   #
   #printf "%*s%s %s\n",10,'','trace_file   ',( defined $opts{trace_file})?'    defined':'not defined'; 
   #printf "%*s%s %s\n",10,'','trace_dirs   ',( defined $opts{trace_dirs})?'    defined':'not defined'; 
   #printf "%*s%s %s\n",10,'','trace_dir    ',( defined $opts{trace_dir} )?'    defined':'not defined'; 
   #printf "%*s%s %s\n",10,'','information  ',( defined $opts{info}      )?'    defined':'not defined'; 
    exit 0;
}

#=================================================================================================================================
# End of main() 

#
# Subroutine implementation
#
#=================================================================================================================================




sub   check_command_line{
      my    (   $opts_ref                                                                                   # Input     Reference to %opts w/ commandline input
            ,   $defs_ref       )   = @_;

      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}

      printf "%*s%s\n",$i,$p,subroutine('name') if( defined ${$opts_ref}{dbg} );
      
      if ( defined ${$opts_ref}{subs}    ) {
          printf "%*s%s ::\n",$i,$p,'Subroutines';
          foreach my $entry (@{${$opts_ref}{subs}}   ){
              printf "%*s%s\n",$i+4,$p,$entry;
          }#foreach
      }#if 

      if ( defined ${$opts_ref}{report_dir} ) {
          printf $proh "%*s%s\n",$i,'',${$opts_ref}{report_dir}
      } else {
          printf " WARNING : No Output Report Path defined on commandline \n";
      }

}#sub check_command_line


sub   help{
      my    (   $opts_ref       )   = @_;                                                                   # Input     Reference to %opts

      printf "\n";
      printf " ... USAGE    :: %s %s\n" , ${$opts_ref}{program}
                                        , ${$opts_ref}{version};
      printf "\n";
      printf "     SYNOPSYS :: Test Sequence Generator %s\n",${$opts_ref}{program}; 
      printf "\n";
      printf "     %s     --input=<FILE>\n", ${$opts_ref}{program};
      printf "                  --input=<FILE> --output=<FILE>\n";
      printf "\n";
      printf "\n";
      printf "     Debugging\n";
      printf "     <%s>     --input=<FILE> --output=<FILE> | & tee ./log.out\n",${$opts_ref}{program};
      printf "                  --debug=<SUB>   make any subroutine observable\n";
      printf "\n";
      printf "\n";
      printf "     Author    %s\n",${$opts_ref}{owner};
      printf "     Synpatics Confidential Tool               Copyright, San Jose 2018\n";
      exit 0;
}#sub help

sub   subroutine {
      my ($r)    = ( @_, 'name');                                                   # full, namespace, name
      my ($space,$name) = split(/::/, (caller(1))[3]);
      return    ( $r =~ m/full/ ) ?  (caller(1))[3]                                 #           return package::subname
              : ( $r =~ m/space/) ?  $space                                         #           return subroutin name
              : ( $r =~ m/name/ ) ?  $name                                          #           return namespace/package
              : $name;                                                              # default   return subroutin name
}#sub subroutine

sub   DebugControl {
      my    (   $opts_ref   )   =   @_;                                             # Input     Command Line Options
                                                                                    # Output    Logging Control of all log files
      my $i = ${$opts_ref}{indent};
      my $p = '';                                                                   # ${$opts_ref}{padding_pattern}
      my @ulist;                                                                    # unpacked list
      printf "\n";
      printf "%*s%s\n",$i,$p,subroutine('name')     if( defined ${$opts_ref}{dbg} );
               
      if ( defined ${$opts_ref}{dbg}    ) {
          printf "%*s%s ::\n",$i,$p,'DebugOptions';
          foreach my $entry (@{${$opts_ref}{dbg}}   ){
              printf "%*s%s\n",$i+4,$p,$entry       if( defined ${$opts_ref}{dbg} );
              my @unpacked = split /,/ ,$entry;
              foreach my $e (@unpacked) {
                  push (@ulist, $e);
              }#unpack 
          }#each entry
          ${$opts_ref}{dbg} = \@ulist;
          foreach my $entry (@{${$opts_ref}{dbg}}   ){
              printf "%*s%s\n",$i+4,$p,$entry;
              if ($entry =~ m/all/ ) {
              }
          }#foreach
      }#if
                                                                                   
      if ( defined ${$opts_ref}{logs}   ){                                          # Test      Array reference
        if ( @{${$opts_ref}{logs}}    )   {                                         # Test      Array empty
            printf "\n";
            foreach my $log ( @{${$opts_ref}{logs}} ) {
                printf " ... logging :: %s\n", $log;
                if ( $log =~  m/all/ ) {                                            # Storage intensive
                    ${$opts_ref}{logging_trace}         = 1;
                    ${$opts_ref}{logging_parse}         = 1;
                    ${$opts_ref}{logging_build}         = 1;
                    ${$opts_ref}{logging_error}         = 1;
                    ${$opts_ref}{logging_window}        = 1;
                    ${$opts_ref}{logging_latency}       = 1;
                    ${$opts_ref}{logging_payload}       = 1;
                    ${$opts_ref}{logging_transfer}      = 1;
                    ${$opts_ref}{logging_bandwidth}     = 1;
                    ${$opts_ref}{logging_transaction}   = 1;
                    ${$opts_ref}{logging_transfer_list} = 1;
                }#
                ${$opts_ref}{logging_trace}         = 1 if ( $log =~ m/trace/  );      # logging filesystem flow control
                ${$opts_ref}{logging_parse}         = 1 if ( $log =~ m/parse/  );      # logging trace file parsing
                ${$opts_ref}{logging_build}         = 1 if ( $log =~ m/build/  );      # logging trace file transfer list building
                ${$opts_ref}{logging_error}         = 1 if ( $log =~ m/error/  );      # logging trace file errors                 only explicite request for tracking
                ${$opts_ref}{logging_window}        = 1 if ( $log =~ m/window/ );      # logging trace file analysis window reduction
                ${$opts_ref}{logging_latency}       = 1 if ( $log =~ m/latency/);      # logging trace file latency     analysis
                ${$opts_ref}{logging_payload}       = 1 if ( $log =~ m/payload/);      # logging trace file payload     analysis
                ${$opts_ref}{logging_transfer}      = 1 if ( $log =~ m/transfer/);     # logging trace file transfer    analysis
                ${$opts_ref}{logging_bandwidth}     = 1 if ( $log =~ m/bandwidth/ );   # logging trace file bandwidth   analysis
                ${$opts_ref}{logging_transaction}   = 1 if ( $log =~ m/transaction/);  # logging trace file transaction analysis
                ${$opts_ref}{logging_transfer_list} = 1 if ( $log =~ m/transfer_list/);# logging trace file transfer list inspecting-algorithm development pointer list
                
                if (    ${$opts_ref}{logging_parse}     ||  ${$opts_ref}{logging_transfer_list}
                    ||  ${$opts_ref}{logging_build}     ||  ${$opts_ref}{logging_payload}  
                    ||  ${$opts_ref}{logging_error}     ||  ${$opts_ref}{logging_transfer}
                    ||  ${$opts_ref}{logging_window}    ||  ${$opts_ref}{logging_bandwidth}
                    ||  ${$opts_ref}{logging_latency}   ||  ${$opts_ref}{logging_transaction}   ) {

                    printf "\n";
                    printf " ... calling CreateLoggingPath()\n";

                    CreateLoggingPath   (   \%opts                                                  # Input     Command Line Options
                                        ,   \@traces            );                                  #           List of trace files w/ information
                                        
                }#Need to build LoggingPath

            }#foreach
        }#Loggs is not empty
      }#Array reference is defined
}#sub DebugControl


