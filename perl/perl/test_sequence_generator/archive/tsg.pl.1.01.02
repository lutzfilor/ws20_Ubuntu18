#!/tools/sw/perl/bin/perl -w
# Author    Lutz Filor
# Phone     408 807 6915
#
# Purpose   Creating multiple Register READ, WRITE transaction from pseudo transaction code
#
# Revision  VERSION     DATE            Description
# ================================================================================================
# History   1.01.01     11/15/2018      Create project TSG - Test Sequence Generator
#                       11/16/2018      Implement debugging feature on sub level
#           1.01.02     11/19/2018                  
# ================================================================================================

my $VERSION = "1.01.02";

use strict;
use warnings;
use Carp            qw / croak
                         carp
                         cluck
                         confess    /;

use feature 'state';                                                                # Static local variables

use Readonly;
use Getopt::Long;
use File::Path      qw /make_path/;                                                 # Create directories
use File::Basename;                                                                 # Handle absolute file names
use Cwd             qw /abs_path
                        getcwd
                        cwd     /;                                                  # Current working directory

#use Padwalker;                                                                     # Not available/installed
#use Package::Stash;                                                                # available
#use Pod::Usage;                                                                    # available
#use DateTime;                                                                      # Not used

sub report;
sub parse_header;
sub calculate_payload;
sub elaborate_tracefile;
sub CreateLoggingPath;

Readonly my $DIGITS => qr { \d+ (?: [.] \d*)? | [.] \d+ }xms;
Readonly my $SIGN   => qr { [+-] }xms;
Readonly my $EXPO   => qr { [eE] $SIGN? \d+ }xms;
Readonly my $FLOAT  => qr { ($SIGN?) ($DIGITS) ($EXPO?) }xms;

my %defines;                                                                        # Command line defines
my %opts    =   (   dir_pattern         =>  'ahbfab',                               # Default name pattern for AHB trace points            <== !! Depending on Environment
                    file_pattern        =>  'ahb_beat.log',                         # Default name pattern for AHB traces                  <== !! Depending on Environment
                    progress_log        =>  'progress.log',                         # log     progress phases of program                    !! Can't be turned off, aka run.log
                    error_log           =>  'error.log',                            # log     dedicated parsing errors,                     !! Can't be turned off
                    trace_default       =>  'trace.log',                            # Default logname for logging input trace files
                    parse_default       =>  'parser.log',                           # Default logname for parsing input trace file
                    build_default       =>  'build.log',                            # Default logname for building trace transaction/transfer list
                    transfer_default    =>  'transfer.log',                         # Default logname for transfers, type (IDLE,ADDR,DATA,BUSY) and duration
                    transferlist_default=>  'pointer.log',                          # Default logname for transfer list
                    payload_default     =>  'payload.log',                          # Default logname for payload analysis initialize_payload_analysis()
                    transaction_default =>  'transaction.log',                      # Default logname for transaction analysis, by direction, type and size
                    transaction2_default=>  'transaction2.log',                     # Default logname for transactio2 analysis, by direction, type and size via pointer
                    latency_default     =>  'latency.log',                          # Default logname for latency     analysis, ( from, to ) window
                    bandwidth_default   =>  'bandwidth.log',                        # Default logname for bandwidth   analysis, ( from, to ) window
                    window_default      =>  'window.log',                           # Default logname for determine the trace window within the trace file
                    address_default     =>  'address.log',                          # Default logname for address coverage analysis, accumulative
                    report_default      =>  'analysis.rpt',                         # Default logname for analysis report
                    coverage_default    =>  'coverage.rpt',                         # Default logname for coverage report
                    errlog_default      =>  'error.log',                            # Default logname for reporting on input trace file errors
                    report_path_default =>  'ahb_tracker_analysis',                 # Default report path root
                    owner               =>  'Lutz Filor',                           # Maintainer
                    call                =>  join (' ', @ARGV),                      # Capture command line
                    program             =>  $0,                                     # Script    Name
                    version             =>  $VERSION,                               # Script    Version
                    log_path_default    =>  'logs',                                 # Default logging path appendix for each trace
                    subs                =>  [   qw  (   debug
                                                        DebugControl
                                                        check_command_line
                                                        flush_test_sequence
                                                    )                               # List of Subroutines
                                            ],
                    indent              =>  5,                                      # Default indentation
                    preamble            =>  ' ... ',                                # Default preamble
                    indent_pattern      =>  '',                                     # Default indent pattern Whitespace
                );

my %transfer_pointer;                                                               # Unified pointer state of AHB transfer list
my @traces;                                                                         # Trace file list
my @trace_dir;                                                                      #
my @trace_dirs;                                                                     #                                                               to be deprecated
my %Trace;                                                                          # Trace  file header information
my %ahb_transfer_new;                                                               #        AHB transfer    analysis new
my %ahb_latency_new;                                                                #        AHB latency     analysis new/refactored
my %ahb_bandwidth_new;                                                              #        AHB bandwidth   analysis new/refactored
my %ahb_transaction_new;                                                            #        AHB transaction analysis new/refactored
my %ahb_transaction2_new;                                                           #        AHB transaction analysis new/refactored
my %ahb_address_new;                                                                #        AHB address     coverage   analysis
my %AHB_hash;                                                                       # LEGACY    Trace file transfer information                     to be deprecated
                                                                                    # access AHB command transfers via time stamp

my $error_log       = 'error.log';                                                  # log    trace file reporting errors
#################################################################################################################################
#################################################################################################################################

#
# main entry
#
#=================================================================================================================================
my   ($s,$m,$h,$cday,$mon,$year,$wday,$yday,$isdst) = localtime;
open (my $proh, ">$opts{progress_log}")  ||  die " Cannot create log $opts{progress_log}";   # Open Progress log file

GetOptions  (   'input|in=s'            =>  \$opts{pseudo_seq},                     # Source    w/ read,write transaction definition
                'debug|dbg=s@'          =>  \$opts{dbg},                            # Debug     Turning on debug feature on sub by sub
                'dbg0'                  =>  \$opts{dbg_debugControl},               #           Watching the Pretorian
                'list|l=s@'             =>  \$opts{lst},                            # List      Subroutines
                'flush'                 =>  \$opts{flush},                          # Flush     Test Sequence
                'specification'         =>  \$opts{spec},

                #'address_coverage|ac'  =>  \&addr_cov,                             # --        testing address coverage
                'address_coverage|ac'   =>  \$opts{coverage},                       # --        testing address coverage
                #'debug'                 =>  \$opts{debug},                          # Turn      ON LOGGING
                'info'                  =>  \$opts{info},                           # Report    trace file information => window (Open, Close)
                'from|s=i'              =>  \$opts{START},                          # Specify   Start time, overwrite default
                'until|e=i'             =>  \$opts{STOP},                           # Specify   End   time, overwrite default
                'report_dir|o=s'        =>  \$opts{report_dir},                     # Overwrite Output      default name of report directory
                'trace_dir|dir|d=s'     =>  \$opts{trace_dir},                      # Specify   directory w/ trace files
                'trace|t|f=s'           =>  \$opts{trace_file},                     # Specify   trace file
                'trace_dirs=s'          =>  \$opts{trace_dirs},                     # Specify   all project trace files
                'debug_trace|dbg1'      =>  \$opts{debug_trace},                    # Debug buffered STDERR file correlation, START here
                'debug_line|dbg2'       =>  \$opts{debug_line},                     # Debug buffered STDERR line correlation, Tbd not implemented
                'debug_logs|dbg3'       =>  \$opts{debug_logs},                     # Debug writeout logfiles for all steps, deep debug
                'logging|log=s@'        =>  \$opts{logs},                           # Turn      ON selective LOGGING
                'defines=s'             =>  \%defines,
                'help|h|?'              =>  \$opts{help},                           # Usage     Information
                'man|m'                 =>  \&help2,                                # Manual    Information
            );                                                                      # Command Line Processor


printf "\n";
#check_command_line  (   \%opts     );                                              # Break the chicken and egg problem
DebugControl        (   \%opts      );                                              # Tuning debugging
debug               (   '','debug'  ) if debug('debug');                            # debug(subr=name,phase=dbg
if  (      defined $opts{flush}
                                    )                                               # coverage is a seperate analysis
{   #
    # Parsing   AHB trace file
    # Building   2D directed graph/list of AHB (ADDR, DATA) transfers
    #

    #   open specification file
    #   BASEADDRESS     32 bit  0xFFFF0000
    #   DATAWIDTH       32 bit
    #                   4KB     alignment
    #                   4Byte   alignment
    #   Reserved address
    #   Bitmask  address        FFFF_FFFF   default
    #   Pattern  address        random      default
    #   WRITE    address data
    #   READ     address data
    #   COMPARE  expect  data
    flush_test_sequence (   \%opts      );
    
    exit 0; # Main Exit
} elsif (   defined $opts{help}     )  {                                                # Online    help
    #printf  "Why is this option not define\n";
    help    (   \%opts  );
} else {
    printf "\n";
    printf " ... USAGE    :: %s %s\n",$opts{program}
                                     ,$opts{version};
    printf "     Type <--help> for more information\n",$opts{program};
    printf "\n";
    exit 0;
}

#=================================================================================================================================
# End of main()

#
# Subroutine implementation
#
#=================================================================================================================================


sub   flush_test_sequence   {
      my    (   $opts_ref                                                                                   # Input     Reference to %opts w/ commandline input
            ,   $defs_ref       )   = @_;

      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}
      my $n = subroutine('name');
      my $file_name;

      printf "%*s%s()++\n",$i,$p,$n if( debug($n));
      if ( defined ${$opts_ref}{specification}  ){
          $file_name    = ${$opts_ref}{specification};
          if (-e $file_name) {
            # open ()
            # open(my $fh, "<", $filename) or die "Could not open file '$filename'. $!";
            # open ( $payh, ">$logfile")|| die " Can not create log $logfile";

          }
      }#if specification
}#sub flush_test_sequence

sub   check_command_line{
      my    (   $opts_ref                                                                                   # Input     Reference to %opts w/ commandline input
            ,   $defs_ref       )   = @_;

      my $i = ${$opts_ref}{indent};
      my $p = ${$opts_ref}{indent_pattern};                                                                 # ${$opts_ref}{padding_pattern}

      printf "%*s%s()\n",$i,$p,subroutine('name') if( defined ${$opts_ref}{dbg} );

      if ( defined ${$opts_ref}{subs}    ) {
          printf "%*s%s :: %s\n",$i,$p,'Subroutines','list';
          foreach my $entry (@{${$opts_ref}{subs}}   ){
              printf "%*s%s\n",$i+4,$p,$entry;
          }#foreach
      }#if

      ### if ( defined ${$opts_ref}{report_dir} ) {
      ###     printf $proh "%*s%s\n",$i,'',${$opts_ref}{report_dir}
      ### } else {
      ###     printf " WARNING : No Output Report Path defined on commandline \n";
      ### }

}#sub check_command_line


sub   help{
      my    (   $opts_ref       )   = @_;                                                                   # Input     Reference to %opts

      printf "\n";
      printf "     SYNOPSYS :: Test Sequence Generator %s\n",${$opts_ref}{program};
      printf "\n";
      printf " ... USAGE    :: %s %s\n",${$opts_ref}{program}
                                       ,${$opts_ref}{version};
      printf "\n";
      printf "     %s     --input=<FILE>\n", ${$opts_ref}{program};
      printf "                  --input=<FILE> --output=<FILE>\n";
      printf "\n";
      printf "\n";
      printf "     Debugging\n";
      printf "     <%s>     --input=<FILE> --output=<FILE> | & tee ./log.out\n",${$opts_ref}{program};
      printf "                  --debug=<SUB>   make any subroutine observable\n";
      printf "\n";
      printf "\n";
      printf "     Author    %s\n",${$opts_ref}{owner};
      printf "     Synpatics Confidential Tool               Copyright, San Jose 2018\n";
      exit 0;
}#sub help


sub   subroutine {
      my ($r)    = ( @_, 'name');                                                   # full, namespace, name
      my ($space,$name) = split(/::/, (caller(1))[3]);
      return    ( $r =~ m/full/ ) ?  (caller(1))[3]                                 #           return package::subname
              : ( $r =~ m/space/) ?  $space                                         #           return subroutin name
              : ( $r =~ m/name/ ) ?  $name                                          #           return namespace/package
              : $name;                                                              # default   return subroutin name
}#sub subroutine

sub   DebugControl {
      my    (   $opts_ref   )   =   @_;                                             # Input     Command Line Options
                                                                                    # Output    Logging Control of all log files
      my $i = ${$opts_ref}{indent};
      my $p = '';                                                                   # ${$opts_ref}{padding_pattern}
      my @ulist;                                                                    # unpacked list
      
      printf "%*s%s()\n",$i,$p,subroutine('name')   if( defined ${$opts_ref}{dbg_DebugControl} );

      if ( defined ${$opts_ref}{dbg}    ) {
          printf "%*s%s :: %s\n",$i,$p  
                                ,'DebugOptions'
                                ,'unpacking'        if( defined ${$opts_ref}{dbg_DebugControl} );
          foreach my $entry (@{${$opts_ref}{dbg}}   ){
              printf "%*s%s\n",$i+4,$p,$entry       if( defined ${$opts_ref}{dbg_DebugControl} );
              my @unpacked = split /,/ ,$entry;
              foreach my $e (@unpacked) {
                  printf "%*s%s +\n",$i+4,$p,$e     if( defined ${$opts_ref}{dbg_DebugControl} );
                  push (@ulist, $e);
              }#unpack
          }#each entry
          ${$opts_ref}{dbg} = \@ulist;
          printf "%*s%s :: %s :: %s\n"  ,$i,$p
                                        ,'DebugOptions'
                                        ,'self check'
                                        , $#ulist   if( defined ${$opts_ref}{dbg_DebugControl} );
          foreach my $entry ( @ulist ){
              #printf "%*s%s\n",$i+4,$p,$entry;
              if ($entry =~ m/all/ ) {
                foreach my $e ( @{${$opts_ref}{subs}} ){
                    printf "%*s%s::%s\n",5,''
                                        ,'set',$e   if( defined ${$opts_ref}{dbg_DebugControl} );;
                    debug($e,'set');
                }#foreach
              }#
              if ( $entry ~~ @{${$opts_ref}{subs}} ) {
                    printf "%*s%s::%s\n",5,''
                                        ,'set'
                                        ,$entry     if( defined ${$opts_ref}{dbg_DebugControl} );
                    debug($entry,'set');
              }
          }#foreach
      }#if
}#sub DebugControl


sub   debug {
      my    (   $name
            ,   $phase  )   =   @_;

      $phase //= 'probe';               # default setting !defined
      state %holding;                   # holding all debug setting
      my $size = keys %holding;

      #printf "     debug(phase=%s, name=%s)\n",$phase, $name;              # Need to think how to debug subroutine debug
      if      ( $phase =~ m/set/    ) { # setup debugging feature
         #printf "%*sholding hash has %s entries\n",5,'',$size;
         #printf "%*s%s setting\n",5+4,'',$name;
         $holding{$name} = 1; $size = keys %holding;
         #printf "%*sHolding hash is %s\n",5,'', $size;
      } elsif ( $phase =~ m/probe/  ) { # probe debugging feature
         if ( defined $holding{$name} ) {
             #printf "%*s%s::%s\n",5+4,'',$name,$holding{$name};
             return $holding{$name};
         } else {
             return 0;
         }
      } elsif ( $phase =~ m/debug/  ) {
         printf "%*s%s :: debugging\n",5,'',subroutine('name');
         foreach my $e ( keys %holding) {
             printf "%*s%s::%s\n",5+4,'', $holding{$e}, $e;
         }#foreach
      } else  {
      }#default

}#sub debug








